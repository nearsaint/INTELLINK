<template>
<div class="home">
  <div class="mainBox">
    <div class="viewTitle">
      <a class="bt" v-bind:class="[index==artsActive?'active':'']" v-for="(item, index) in prisonList.Arts" @click="chooseArt(index,item.Name, item)"><i class="fa fa-building" aria-hidden="true"></i> {{item.Name}}</a>
    </div>
    <div class="viewContainer">
      <div v-for="(items,index) in artList.Floors" :class="[]">
        <div class="title">
          <div class="text">
            <a class="floorActive">
              <h5>{{items.Name}}</h5>
              <h6></h6>
            </a>
          </div>
          <div class="btn">
            <el-button @click="websocketsend_setDoor(2, items, 2,$event)" type="danger">打开整层</el-button>
            <el-button @click="websocketsend_setDoor(2, items, 3,$event)" type="warning">停止</el-button>
            <el-button @click="websocketsend_setDoor(2, items, 1,$event)" type="success">关闭整层</el-button>
          </div>
        </div>
        <a class="btn_scroll btn_left">
          <i class="fa fa-angle-left" aria-hidden="true"></i>
        </a>
        <div class="content">
          <div class="li" v-for="(item,index) in items.Doors" :class="[item.AlarmStatus?'warning':'',getStatus_door(item.Status)]">
            <!-- <a class="cancelWarning">消除报警</a> -->
            <div class="title">
              <a @click="openModel_query(item,items)">
                <i class="fa fa-chain-broken" aria-hidden="true"></i>
                <div class="text">
                  <h5>{{item.Name}}</h5>
                  <h6></h6>
                </div>
                <span v-show="item.LockStatus==1" class="lock"></span>
              </a>
            </div>
            <div class="line">
              <div class="progress" :style="'width:'+ item.Progress+ '%'">
              </div>
            </div>
            <div class="btn">
              <el-button @click="websocketsend_setDoor(3, item, 2,$event)" type="danger" :disabled="item.Status==2||item.Status==5||item.Status==6?true:false" plain>打开</el-button>
              <el-button @click="websocketsend_setDoor(3, item, 3,$event)" type="warning" :disabled="item.Status==1||item.Status==2||item.Status==5?true:false" plain>停止</el-button>
              <!--v-show="item.Status==6||item.Status==7"-->
              <el-button @click="websocketsend_setDoor(3, item, 1,$event)" type="success" :disabled="item.Status==1||item.Status==5||item.Status==7?true:false" plain>关闭</el-button>
            </div>
          </div>
          <div class="last li"></div>
        </div>
        <a class="btn_scroll btn_right">
          <i class="fa fa-angle-right" aria-hidden="true"></i>
        </a>
      </div>

    </div>
    <div class="bottomtools">
      <div class="btn">
        <el-button v-show="prisonList.Arts[artsActive].Name!='一监区'" @click="websocketsend_setDoor(1, prisonList.Arts, 2,$event)" type="danger"><i class="fa fa-unlock" aria-hidden="true"></i> 打开整栋</el-button>
        <el-button v-show="prisonList.Arts[artsActive].Name!='一监区'" @click="websocketsend_setDoor(1, prisonList.Arts, 3,$event)" type="warning"><i class="fa fa-exclamation-circle" aria-hidden="true"></i> 停止</el-button>
        <el-button v-show="prisonList.Arts[artsActive].Name!='一监区'" @click="websocketsend_setDoor(1, prisonList.Arts, 1,$event)" type="success"><i class="fa fa-lock" aria-hidden="true"></i> 关闭整栋</el-button>
      </div>
      <div class="serve">
        <a v-for="(item, index) in prisonList.Arts[artsActive].Panels" :class="[item.Status==2?'working':'']"><i></i>{{item.No}}F面板</a>
      </div>
    </div>
  </div>

  <div class="model1" v-if="model1.show">
    <a class="btn" @click="closeModel1"><i class="fa fa-times" aria-hidden="true"></i></a>
    <div class="modelbox" :class="[model1.AlarmStatus?'warning':'']">
      <div class="normal animated fadeInLeft" :class="getStatus_door(model1.status)">
        <div class="title">
          <span v-if="model1.LockStatus==1" class="lock">门锁已落锁</span>
          <i class="fa fa-chain-broken" aria-hidden="true"></i>
          <div class="text">
            <h4>{{model1.prison}}<i></i>{{model1.floor}}<i></i>{{model1.room}}</h4>
            <h6></h6>
          </div>
        </div>
        <div class="line">
          <div class="progress" :style="'width: '+ model1.progress +'%'">
          </div>
        </div>
        <div class="btn">
          <el-button type="danger" :disabled="model1.status==2||model1.status==5||model1.status==6?true:false"><i class="fa fa-unlock" aria-hidden="true"></i> 打开监舍门</el-button>
          <el-button type="warning" :disabled="model1.status==1||model1.status==2||model1.status==5?true:false"><i class="fa fa-exclamation-circle" aria-hidden="true"></i> 停止</el-button>
          <!-- v-show="model1.status==7||model1.status==6" -->
          <el-button type="success" :disabled="model1.status==1||model1.status==5||model1.status==7?true:false"><i class="fa fa-lock" aria-hidden="true"></i> 关闭监舍门</el-button>
        </div>
      </div>
      <div class="main animated fadeInRight">
        <div class="text" style="display:none;">
          <h5>监舍门数据</h5>
          <ul>
            <li>
              <span>开门百分比</span>
              <span>{{model1.progress}}</span>
            </li>
            <li>
              <span>开门速度</span>
              <span>{{model1.speed}}</span>
            </li>
            <li>
              <span>开门平均速度</span>
              <span>{{model1.averageSpeed}}</span>
            </li>
            <li>
              <span>电压</span>
              <span>{{model1.voltage}}</span>
            </li>
            <li>
              <span>电流</span>
              <span>{{model1.electric}}</span>
            </li>
          </ul>
        </div>
        <div class="log">
          <h5>近5条门开关日志 <router-link to="/log/roomLog">更多</router-link ></h5>
          <ul>
            <li v-show="model1.logList.length==0">
              <h5>暂无数据</h5>
            </li>
            <li v-for="(item, index) in model1.logList">
              <i class="fa" :class="getOperate_class(item.OperateType)" aria-hidden="true"></i>
              <span class="time">{{item.CreationTime}}</span>
              <h5><span>{{getOperate(item.OperateType)}}</span><span>{{getLocation(item.Location)}}</span><span v-if="item.OperatorName">{{item.OperatorName}}</span></h5>
            </li>
          </ul>
        </div>
        <div class="log">
          <h5>近5条门报警日志 <router-link to="/log/warningLog">更多</router-link ></h5>
          <ul>
            <li v-show="model1.warningList.length==0">
              <h5>暂无数据</h5>
            </li>
            <li v-for="(item, index) in model1.warningList">
              <i class="fa fa-warning" aria-hidden="true"></i>
              <span class="time">{{item.CreationTime}}</span>
              <h6 class="li"><span>{{item.BuildingName}}-{{item.FloorName}}-{{item.DoorName}} 门警报!</span><span>警报类型 : {{getAlarm(item.AlarmCode)}}</span></h6>
            </li>
          </ul>
        </div>
      </div>
    </div>
    <div class="bg"><a @click="closeModel1"></a></div>
  </div>
</div>
</template>
<style lang="scss" scoped>
.log {
    > ul {
        > li {
            > h5 {
                width: 100%;
                display: flex;
                justify-content: flex-start;
                > span {
                    display: block;
                    width: 20%;
                    margin-right: 10px;
                }
            }
            > h6 {
                width: 100%;
                display: flex;
                justify-content: flex-start;
                > span {
                    display: block;
                    width: 50%;
                    margin-right: 10px;
                }
            }
        }

    }
}
.cancelWarning {
    position: absolute;
    top: 0;
    right: 0;
    font-size: 12px;
    line-height: 20px;
    background: red;
    border-radius: 0 0 0 8px;
    padding: 0 8px;
    z-index: 99;
}
</style>
<script>
export default {
  data() {
    return {
      websock: null,
      markShow: false,
      model1: {
        show: false,
        prison: '未知监区',
        prisonId: '',
        floor: '未知楼层',
        floorId: '',
        room: '未知监舍',
        doorId: '',
        status: '未知',
        progress: 0,
        PLCIp: '',
        AlarmStatus: false,
        LockStatus: 1,
        speed: 0,
        averageSpeed: 0,
        voltage: 0,
        electric: 0,
        logList: [],
        warningList: [],
      },

      prisonList: this.$store.state.prison.list,
      doorsIdList: [],
      artList: [],
      artsActive: 0,
      floorStatus: [],
    }
  },
  beforeCreate: function() {},
  created: function() {
    this.initWebSocket();
  },
  mounted: function() {
    let this_ = this;
    $(document).on('click', 'div.allMark', function() {
      $('.viewContainer').removeClass('blur');
      $('.viewContainer>div').removeClass('active');
      $('div.allMark').fadeOut();
    });
    $(document).on('click', 'a.floorActive', function() {
      $('div.allMark').fadeIn();
      $(this).parents(".title").parent().addClass('active');
      $(this).parents(".viewContainer").addClass('blur')
    });

    $(document).on('click', 'a.btn_scroll', function() {
      // console.log($(this).parent().children('div.content'));
      var divWidth = $(this).parent().children('div.content').width()
      var child = $(this).parent().children('div.content').children().length - 1;
      var childWidth = 259;
      var childDisplay = parseInt(divWidth / childWidth);
      var x1 = parseInt($(this).parent().children('div.content').css("left").replace(/[^0-9]/ig, "")) / childWidth;
      var x2 = child - childDisplay - x1;
      if ($(this).hasClass('btn_right')) {
        if (x2 > 0) {
          $(this).parent().children('div.content').css("left", 0 - (childWidth * (x1 + 1)));
        }
      } else if ($(this).hasClass('btn_left')) {
        if (x1 > 0) {
          $(this).parent().children('div.content').css("left", 0 - (childWidth * (x1 - 1)));
        }
      }
    });

  },
  beforeDestroy: function() {
    this.websock.close();
  },
  destroyed: function() {
    this.websock.close();
  },
  methods: {
    closeModel1: function() {
      this.markShow = false;
      this.model1.show = false;
    },
    openModel1: function() {
      this.markShow = true;
      this.model1.show = true;
    },

    chooseArt: function(i, name, item) {
      console.log(item)
      this.artsActive = i;
      this.artList = this.prisonList.Arts[i];
      this.model1.prison = name;
      this.model1.prisonId = item.Id;
    },
    getStatus_door: function(i) {
      if (i == 1) {
        return 'closed'
      } else if (i == 2) {
        return 'open'
      } else if (i == 3) {
        return 'stop'
      } else if (i == 4) {
        return 'on'
      } else if (i == 5) {
        return 'off'
      } else if (i == 6) {
        return 'ing openning'
      } else if (i == 7) {
        return 'ing closing'
      }
    },

    getStatus_floor: function(e) {
      // console.log(e);
      let doors = [];
      for (let i in e) {
        doors.push(e[i].Status);
      }
      if (doors.indexOf("6") != -1 || doors.indexOf("7") != -1) {
        return "ing"
      } else if (doors.indexOf("1") == -1 && doors.indexOf("2") == -1 && doors.indexOf("3") == -1 && doors.indexOf("4") == -1 && doors.indexOf("6") == -1 && doors.indexOf("7") == -1) {
        return "off"
      } else if (doors.indexOf("5") == -1 && doors.indexOf("2") == -1 && doors.indexOf("3") == -1 && doors.indexOf("4") == -1 && doors.indexOf("6") == -1 && doors.indexOf("7") == -1) {
        return "closed"
      } else if (doors.indexOf("1") == -1 && doors.indexOf("5") == -1 && doors.indexOf("3") == -1 && doors.indexOf("4") == -1 && doors.indexOf("6") == -1 && doors.indexOf("7") == -1) {
        return "open"
      }
    },
    getStatus_building: function() {

    },

    //WebSocket
    initWebSocket: function() {
      // const link = 'ws://192.168.0.76:5001/Extension/GSocket/WSHandler.ashx?user=' + this.$store.state.user.userName;　　
      // const link = 'ws://10.41.63.55:5001/Extension/GSocket/WSHandler.ashx?user=' + this.$store.state.user.userName;　　
      const link = 'ws://192.168.0.13:3150/Extension/GSocket/WSHandler.ashx?user=' + this.$store.state.user.userName;　　　　　　　　
      this.websock = new WebSocket(link);　　　　　　　　
      this.websock.onopen = this.websocketonopen;
      this.websock.onerror = this.websocketonerror;
      this.websock.onmessage = this.websocketonmessage;　　　　　　　　
      this.websock.onclose = this.websocketclose;　　　　
    },
    websocketonopen: function(data) {　　　　　　　　
      console.log("WebSocket连接成功");　　　　　　
    },
    websocketonerror: function(e) {
      console.log("WebSocket连接发生错误" + e);　　　　　　
    },
    websocketonmessage: function(e) {　　
      let that = this;
      let jsonData = JSON.parse(e.data);
      // console.log(jsonData);
      let key = jsonData.Key;
      let data = jsonData.Data;
      console.log(data);
      console.log(key);
      if (key == 4) {
        that.prisonList = data.Data;
        that.$store.state.prison.list = data.Data;
        if(data.Data.Arts.length>0){
          let list = data.Data;
          that.artList = list.Arts[that.artsActive];
          that.model1.prison = list.Arts[that.artsActive].Name;
          that.model1.prisonId = list.Arts[that.artsActive].Id;
          let arts = list.Arts;
          for (let i in arts) {
            let floors = arts[i].Floors;
            for (let n in floors) {
              let doors = floors[n].Doors;
              for (let s in doors) {
                that.doorsIdList.push(doors[s].Id);
              }
            }
          }
          this.websocketsend_getStatus();
          console.log(that.artList);
          console.log(that.prisonList.Arts[that.artsActive].Id);
        }
      } else if (key == 0) {
        let building = that.prisonList.Arts;
        for (let i in building) {
          if (data.ArtId == building[i].Id) {
            // console.log(building[i]);
            let floor = building[i].Floors;
            for (let n in floor) {
              if (data.FloorId == floor[n].Id) {
                // console.log(floor[n]);
                let door = floor[n].Doors;
                for (let s in door) {
                  if (data.DoorId == door[s].Id) {
                    door[s].Status = data.DoorStatus;
                    door[s].Progress = data.Progress;
                    door[s].LockStatus = data.LockStatus;
                    door[s].AlarmStatus = data.AlarmStatus;
                    console.log(that.artList);

                    if (that.model1.show == true) {
                      if (that.model1.doorId == data.DoorId) {
                        that.model1.status = data.DoorStatus;
                        that.model1.AlarmStatus = data.AlarmStatus;
                        that.model1.LockStatus = data.LockStatus;
                        that.model1.progress = data.Progress;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else if (key == 2) {
        console.log(data);
        console.log(that.prisonList);
        for (let i in that.prisonList.Arts) {
          if (data.ArtId == that.prisonList.Arts[i].Id) {
            for (let n in that.prisonList.Arts[i].Panels) {
              if (data.FloorNo == that.prisonList.Arts[i].Panels[n].No) {
                that.prisonList.Arts[i].Panels[n].Status = data.Status;
              }
            }
          }
        }
      }
    },
    websocketsend_setDoor: function(prison, item, status, e) {
      console.log(item);
      var obj = document.getElementById("cam").contentWindow;
      obj.document.getElementById("file").style.display = "none";
      this.closeCamera();
      let that = this;
      let doorsId = [];
      let camId = [];
      if (prison == 3) {
        doorsId.push(item.Id);
        camId = item.Webcams;
      } else if (prison == 2) {
        camId = item.Webcams;
        for (let n in item.Doors) {
          doorsId.push(item.Doors[n].Id);
        }
      } else if (prison == 1) {
        camId = item[that.artsActive].Webcams;
        let floors = item[that.artsActive].Floors;
        for (let n in floors) {
          let doors = floors[n].Doors;
          for (let s in doors) {
            doorsId.push(doors[s].Id);
          }
        }
      }
      console.log(doorsId);
      console.log(camId);
      if (camId.length > 0) {
        for (let i in camId) {
          let num = parseInt(i) + 1;
          console.log(num);
          console.log(camId[i]);
          console.log(item);
          this.StartFrameLive(num, camId[i],item);
          // this.$notify.info({
          //   message: '第' + num + "个窗口播放! cameraID:" + camId[i] + "!",
          //   title: '消息',
          // });
        };
      }
      let data = {
        "Key": 1,
        "Data": {
          "DoorIds": doorsId,
          "Status": status
        },
      };
      // console.log(e);
      // el.addClass('is-loading');
      this.websock.send(JSON.stringify(data), function(rel) {
        // console.log(rel);
      });　
      this.openCamera();
    },
    websocketsend_getStatus: function() {
      let that = this;
      let data = {
        "Key": 0,
        "Data": {
          "DoorIds": that.doorsIdList
        },
      };
      this.websock.send(JSON.stringify(data));　　
    },
    websocketclose(e) {
      console.log("connection closed");　　　　　
    },

    openModel_query: function(item, items) {
      let that = this;
      console.log(that.model1.prisonId);
      that.model1.floor = items.Name;
      that.model1.floorId = items.Id;
      that.model1.room = item.Name;
      that.model1.doorId = item.Id;
      that.model1.progress = item.Progress;
      that.model1.status = item.Status;
      that.model1.PLCIp = item.PLCIp;
      that.model1.AlarmStatus = item.AlarmStatus;
      that.model1.LockStatus = item.LockStatus;
      that.model1.show = true;

      that.axios.post('/api/doorHty/GetDoorHties', {
        "offset": 0,
        "limit": 5,
        "ArtId": that.model1.prisonId,
        "FloorId": that.model1.floorId,
        "DoorId": that.model1.doorId,
        "StartTime": '',
        "EndTime": '',
        "PoliceName": '',
      }).then(function(rel) {
        if (rel.status == 200) {
          console.log(rel);
          that.model1.logList = rel.data.rows;
        }
      }).catch(rel => {
        console.log(rel);
        that.$message({
          message: '获取列表失败,请刷新',
          type: 'warning'
        });
      });

      that.axios.post('/api/alarmHty/GetAlarms', {
        "offset": 0,
        "limit": 5,
        "ArtId": that.model1.prisonId,
        "FloorId": that.model1.floorId,
        "DoorId": that.model1.doorId,
        "StartTime": '',
        "EndTime": '',
        "Police": '',
      }).then(function(rel) {
        if (rel.status == 200) {
          console.log(rel);
          that.model1.warningList = rel.data.rows;
        }
      }).catch(rel => {
        console.log(rel);
        that.$message({
          message: '获取列表失败,请刷新',
          type: 'warning'
        });
      });
    },
    getOperate: function(e) {
      if (e == 1) {
        return "监舍门关闭"
      } else if (e == 2) {
        return "监舍门开启"
      } else if (e == 3) {
        return "监舍门停止"
      }
    },
    getOperate_class: function(e) {
      if (e == 1) {
        return "fa-circle"
      } else if (e == 2) {
        return "fa-circle-o"
      } else if (e == 3) {
        return "fa-warning"
      }
    },
    getLocation: function(e) {
      if (e == 0) {
        return "分控室"
      } else if (e == 1) {
        return "楼层值班室"
      } else if (e == 2) {
        return "总控室"
      } else if (e == 3) {
        return "门禁打卡"
      }
    },
    getAlarm: function(e) {
      if (e == 1) {
        return "非法开门"
      } else if (e == 2) {
        return "关门超时"
      } else if (e == 3) {
        return "门未开启"
      } else if (e == 4) {
        return "门遇阻停"
      }
    },

    iframe_FunctionTest: function() {
      // console.log("iframe_FunctionTest");
      this.openCamera();
      var obj = document.getElementById("cam").contentWindow;
      obj.document.getElementById("file").style.display = "none";
      var ifmObj = obj.document.getElementById("UserNameText");
      console.log(obj.g_imosActivePlayer);
      // obj.DoGetAllCamList();
    },

    openCamera: function() {
      $('body').addClass('hasCamera');
    },
    closeCamera: function() {
      $('body').removeClass('hasCamera');
      this.StopFrameLive();
    },

    StartFrameLive: function(num, id,item) {
      let that = this;
      let obj = document.getElementById("cam").contentWindow;

      let n ;
      if(item.Webcams){
        n = item.Webcams.length;
      }else if(item[that.artsActive].Webcams){
        n = item[that.artsActive].Webcams.length;
      }
      if(n==1){
        obj.g_imosActivePlayer.IMOSAX_ChangeLayout(1);
      }else if(n>1&&n<=4){
        obj.g_imosActivePlayer.IMOSAX_ChangeLayout(4);
      }else if(n>4&&n<=6){
        obj.g_imosActivePlayer.IMOSAX_ChangeLayout(6);
      }else if(n>6&&n<=8){
        obj.g_imosActivePlayer.IMOSAX_ChangeLayout(8);
      }else if(n>8&&n<=9){
        obj.g_imosActivePlayer.IMOSAX_ChangeLayout(9);
      }else if(n>9&&n<=10){
        obj.g_imosActivePlayer.IMOSAX_ChangeLayout(10);
      }else if(n>10&&n<=13){
        obj.g_imosActivePlayer.IMOSAX_ChangeLayout(13);
      }else if(n>13&&n<=16){
        obj.g_imosActivePlayer.IMOSAX_ChangeLayout(16);
      }else if(n>16&&n<=17){
        obj.g_imosActivePlayer.IMOSAX_ChangeLayout(17);
      }else if(n>17){
        obj.g_imosActivePlayer.IMOSAX_ChangeLayout(25);
      }
      obj.g_imosActivePlayer.IMOSAX_StartFrameLive(num, id);
    },
    StartVodReplay: function(num, id, start, end) {
      let obj = document.getElementById("cam").contentWindow;
      obj.g_imosActivePlayer.IMOSAX_StartVodReplay(num, id, start, end);
    },
    StartDownMediaStream: function(id, start, end) {
      let obj = document.getElementById("cam").contentWindow;
      obj.g_imosActivePlayer.IMOSAX_StartDownMediaStream(id, start, end);
    },
    StopFrameLive: function() {
      let obj = document.getElementById("cam").contentWindow;
      let n = obj.g_imosActivePlayer.IMOSAX_GetFrameNum();
      console.log(n);
      for (let i = 1; i <= n; i++) {
        obj.g_imosActivePlayer.IMOSAX_StopFramelive(i);
      }
    },
  },
  computed: {},
  components: {},
}
  </script>
